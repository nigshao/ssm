<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<context:component-scan base-package="com.ssm"></context:component-scan>

	<!-- 引入配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties" ignore-resource-not-found="true"/>
	<!-- 配置第一个数据源-->
	<bean id="dataSource_leyuan" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="${db.driverClassName}"/>
			<property name="url" value="${db.url}"/>
			<property name="username" value="${db.username}"/>
			<property name="password" value="${db.password}"/>
			<!-- 初始化连接大小 -->
	        <property name="initialSize" value="${db.initialSize}"></property>
			<property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout}"/>
	        <!-- 连接池最大数量 -->  
	        <property name="maxActive" value="${db.maxActive}"/>
	        <!-- 连接池最大空闲 -->
	       <property name="maxIdle" value="${db.maxIdle}"/>
	        <!-- 连接池最小空闲 -->
	        <property name="minIdle" value="${db.minIdle}"/>
	        <!-- 获取连接最大等待时间 -->
	       <property name="maxWait" value="${db.maxWait}"/>
	</bean>
	<!-- 参数：配置实体 -->
	 <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->  
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource1" />
        自动扫描mapping.xml文件
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>-->
	<!-- 配置事务管理 -->
	<!--<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource1"/>
	</bean>-->
	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,自动扫描了所有的XxxxMapper.xml对应的mapper接口文件,只要Mapper接口类和Mapper映射文件对应起来就可以了-->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ssm.base" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>-->
	<!-- 配置第二个数据源-->
	<bean id="dataSource_Vzy2014" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${db2.driverClassName}"/>
		<property name="url" value="${db2.url}"/>
		<property name="username" value="${db2.username}"/>
		<property name="password" value="${db2.password}"/>
		<!-- 初始化连接大小 -->
		<!--<property name="initialSize" value="${db2.initialSize}"></property>
		<property name="removeAbandonedTimeout" value="${db2.removeAbandonedTimeout}"/>-->
		<!-- 连接池最大数量 -->
		<!--<property name="maxActive" value="${db2.maxActive}"></property>-->
		<!-- 连接池最大空闲 -->
		<!--<property name="maxIdle" value="${db2.maxIdle}"></property>-->
		<!-- 连接池最小空闲 -->
		<!--<property name="minIdle" value="${db2.minIdle}"></property>-->
		<!-- 获取连接最大等待时间 -->
		<!--<property name="maxWait" value="${db2.maxWait}"></property>-->
	</bean>
	<!-- 自定义类 用来获取当前数据源-->
	<bean id="dataSource" class="com.ssm.dataSource.ThreadLocalRountingDataSource">
		    <!-- 设置默认的数据源 -->
			<!--<property name="defaultTargetDataSource" value="dataSource_leyuan"/>-->
		     <!-- 设置可切换的数据源-->
		<property name="targetDataSources">
			<map key-type="com.ssm.dataSource.DataSources">  <!--类型为自己定义的DataSources 类型，其中的key名字对应配置的各个dataSource-->
				<entry key="DATA_SOURCES_VZY2014" value-ref="dataSource_Vzy2014"/>
				<entry key="DATA_SOURCES_LEYUAN" value-ref="dataSource_leyuan" />
			</map>
		</property>
	</bean>
	<!-- 配置sessionFactory工厂-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mapper/*.xml"/>
	</bean>
	<!-- 配置事物管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!--DAO接口所在包名，Spring会自动查找其下的类 ,自动扫描了所有的XxxxMapper.xml对应的mapper接口文件,只要Mapper接口类和Mapper映射文件对应起来就可以了-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--<property name="basePackage" value="dataSource"/>-->
		<property name="basePackage" value="com.ssm.base"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
 	</bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 xiangzheme huiyou guangmang yaoyan
<bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource_Vzy2014" />
    自动扫描mapping.xml文件
    <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
</bean>
配置事务管理
<bean id="transactionManager2"
      class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource_Vzy2014"/>
</bean>
 DAO接口所在包名，Spring会自动查找其下的类 ,自动扫描了所有的XxxxMapper.xml对应的mapper接口文件,只要Mapper接口类和Mapper映射文件对应起来就可以了&ndash;&gt;
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.ssm.base" />
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2"></property>
</bean>-->

	<!-- 配置基于注解式声明事物  -->
</beans>
